---
# coreos group vars

# CoreOS update group:  stable, beta, alpha
coreos_update_group: stable

# Python interpreter installed in non-standard location on CoreOS
ansible_python_interpreter: /home/core/bin/python

# Droplet creation settings
size_id: 1gb
image_id: "coreos-{{coreos_update_group}}"
region_id: nyc1

# CoreOS login ID
ansible_ssh_user: core

# Where dropins live
dropin_dir_pat: "/etc/systemd/system/%s.d"

# Swap partition size, GiB
swap_size:  2

# Toolbox image; this one is customized for FreeIPA
toolbox_image_base: "zultron/freeipa-cloud-prov"
toolbox_image_tag: "ipaclient"
toolbox_image: "{{toolbox_image_base}}:{{toolbox_image_tag}}"

##################################
# Docker

# TLS
# - Docker sub-CA
docker_ca: "docker"
docker_ca_subject_cn: "Docker Certificate Authority"
# - Docker service principal
docker_service_principal: "docker"
# - Server-side cert locations
docker_ssl_dir: "{{data_volume_path}}/docker"
docker_ssl_cacert: "{{docker_ssl_dir}}/ca.pem"
docker_ssl_cert: "{{docker_ssl_dir}}/cert.pem"
docker_ssl_key: "{{docker_ssl_dir}}/key.pem"
# - Client-side cert locations (instead of ~/.docker)
docker_client_ssl_dir: "var/docker"
docker_client_ssl_cacert: "{{docker_client_ssl_dir}}/ca.pem"
docker_client_ssl_cert: "{{docker_client_ssl_dir}}/cert.pem"
docker_client_ssl_key: "{{docker_client_ssl_dir}}/key.pem"
# - Docker host remote URL
docker_tcp_port: "tcp://{{ip_addr}}:2375"
# - Client-side extra args
docker_client_extra_args: "--config=../{{docker_client_ssl_dir}} --tlsverify"
#   - Alternatively,
#docker_client_extra_args: "--tlsverify
#       --tlscacert={{docker_client_ssl_cacert}}
#       --tlscert={{docker_client_ssl_cert}}
#       --tlskey={{docker_client_ssl_key}}"


##################################
# Data volume
#
# Used for swap and etcd state

# Data volume block device
data_volume_block_device:  "{{ block_device_path_pat % 'data' }}"
data_volume_name: "{{block_storage_name_pat % 'data'}}"
# - Size in GB
data_volume_size: 4

# Data volume partition
data_volume_device: "{{ data_volume_block_device }}-part2"
data_volume_path: "/media/state"
configs_path: "{{data_volume_path}}/configs"

# Swap partition
swap_device:  "{{ data_volume_block_device }}-part1"

# Systemd unit file names for paths
swap_device_systemd_unit: "{{swap_device|systemd_escape}}.swap"
data_volume_systemd_unit: "{{data_volume_path|systemd_escape}}.mount"

#################################
# bootstrap configuration

# dnsmasq
# - Docker image for bootstrapping etcd
dnsmasq_docker_image: "zultron/freeipa-cloud-prov:dnsmasq"
# - configuration directory
dnsmasq_config_dir: "{{data_volume_path}}/dnsmasq"

#################################
# etcd configuration

# TLS
# - Etcd sub-CA
etcd_ca: "etcd"
etcd_ca_subject_cn: "Etcd Certificate Authority"
etcd_ca_subject: "CN={{etcd_ca_subject_cn}},O={{kerberos_realm}}"
# - Etcd service principal
etcd_service_principal: "etcd"
# - Cert locations; accessible from mount in etcd-member-wrapper
etcd_ssl_dir: "{{ data_volume_path }}/etcd"
etcd_ssl_cacert: "{{ etcd_ssl_dir }}/ca.pem"
etcd_ssl_cert: "{{ etcd_ssl_dir }}/cert.pem"
etcd_ssl_key: "{{ etcd_ssl_dir }}/key.pem"
# - Client-side cert locations
etcd_client_ssl_dir: "var/etcd"
etcd_client_ssl_cacert: "{{etcd_client_ssl_dir}}/ca.pem"
etcd_client_ssl_cert: "{{etcd_client_ssl_dir}}/cert.pem"
etcd_client_ssl_key: "{{etcd_client_ssl_dir}}/key.pem"
# - SRV record
discovery_srv: "etcd.{{domain_name}}"

# Endpoints
etcd_endpoints:
  "{{groups.coreos|formatmapstr('https://{0}.%s:2379' % domain_name,',')}}"

# etcdctl
etcdctl_command:
  "/usr/bin/etcdctl
  --ca-file {{etcd_ssl_cacert}}
  --cert-file {{etcd_ssl_cert}}
  --key-file {{etcd_ssl_key}}
  --endpoints={{etcd_endpoints}}"

#################################
# Flanneld configuration

flanneld_dir:  "{{ data_volume_path }}/flanneld"
flannel_ipa_network:  10.4.0.1/16


#################################
# Calico configuration

# - Latest is 3.1.3, but there's a warning about suspending support
#   for Docker after 2.6
# Get corresponding calicoctl version from docs
calico_version: 2.6.10
calicoctl_version: 1.6.4
calico_data_dir: "{{data_volume_path}}/calico"
calico_log_dir:  "{{calico_data_dir}}/log"

#################################
# Kubernetes configuration

# CoreOS Kubernetes version
# https://quay.io/repository/coreos/hyperkube?tag=latest&tab=tags
k8s_version: "1.7.2_coreos.0"
# - Upstream Kubernetes release
k8s_upstream_release: "1.7"
# - DNS add-on
k8s_kubedns_version: "1.8"
k8s_kube_dnsmasq_version: "1.4"
k8s_exechealthz_version: "1.2"
# - kube dashboard add-on
k8s_dashboard_version: "1.6.3"

# Directory/file paths
k8s_dir: "{{data_volume_path}}/k8s"

# Networking
# FIXME change to {{etcd_cluster_token}}.{{domain_name}}?
k8s_cluster_domain:  "cluster.local."
k8s_pod_network:  10.2.0.1/16
k8s_service_ip_range:  10.3.0.0/24
k8s_service_ip: 10.3.0.1
k8s_dns_service_ip: 10.3.0.10
k8s_apiserver_secure_port: 6443
k8s_apiserver_insecure_port: 9080
k8s_apiserver_url_local:  "http://127.0.0.1:{{k8s_apiserver_insecure_port}}"
# FIXME What should this be?
#   Maybe IPA DNS name for 10.3.0.1, and add service cert?
k8s_apiserver_url_remote:
  "https://{{groups.k8s_apiserver[0]}}.{{domain_name}}:{{k8s_apiserver_secure_port}}"
# FIXME What should this be?
k8s_apiserver_url:
  "{{ (hostname==groups.k8s_apiserver[0])|ternary(
  k8s_apiserver_url_local, k8s_apiserver_url_remote) }}"
k8s_use_calico:  no

# TLS
# - service principal basename
k8s_service_basename: "kubernetes"
# - sub-CA
k8s_ca: "k8s"
k8s_ca_subject_cn: "Kubernetes Certificate Authority"
k8s_ca_subject: "CN={{k8s_ca_subject_cn}},O={{kerberos_realm}}"
# - files
k8s_ssl_dir: "{{k8s_dir}}/certs"
k8s_ssl_cacert: "{{k8s_ssl_dir}}/ca.pem"
k8s_ssl_cert: "{{k8s_ssl_dir}}/cert.pem"
k8s_ssl_key: "{{k8s_ssl_dir}}/key.pem"
k8s_manifest_dir: "{{k8s_dir}}/manifests"
# - local certs
k8s_client_ssl_dir: "var/k8s"
k8s_client_ssl_cacert: "{{k8s_client_ssl_dir}}/ca.pem"
k8s_client_ssl_cert: "{{k8s_client_ssl_dir}}/cert.pem"
k8s_client_ssl_key: "{{k8s_client_ssl_dir}}/key.pem"
# - local manifests
k8s_local_manifest_dir: "var/k8s"

# kubectl and kubeadm
kubeutils_version: "1.6.1"
kubeutils_base_url: >-
  {{ 'https://storage.googleapis.com/kubernetes-release/release' +
     '/v%s/bin/linux/%s' % (kubeutils_version, host_arch) }}
kubectl_url:  "{{kubeutils_base_url}}/kubectl"
kubectl_path:  "../lib/bin/kubectl"
kubeadm_url:  "{{kubeutils_base_url}}/kubeadm"
kubeadm_path:  "../lib/bin/kubeadm"

# Calico CNI
# - versions
k8s_calico_node_version: "1.3.0"
k8s_calico_cni_version: "1.9.1"
k8s_calico_pol_cont_version: "1.9.1"
# - paths
k8s_cni_dir:  "{{k8s_dir}}/cni"
k8s_cni_bin_dir:  "{{k8s_cni_dir}}/bin"
k8s_cni_net_dir:  "{{k8s_cni_dir}}/net.d"
k8s_cni_run_dir:  "{{k8s_cni_dir}}/run"


#################################
# Cluster configuration

# Cluster configuration
initial_cluster:
  "{{[groups.coreos_master[0],hostname]|formatmapstr(
  '{0}=https://{0}.%s:2380' % domain_name,',')}}"
initial_cluster_state:
  "{{ (hostname==groups.coreos_master[0])|ternary('new','existing') }}"

