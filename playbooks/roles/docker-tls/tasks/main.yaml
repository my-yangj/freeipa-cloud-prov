---
#################################
# Configure Docker server and client TLS
#
# Enable TLS service on port 2375; afterwards, run docker remotely like this
#
# docker --tlsverify \
#     -H tcp://host1.example.com:2375 \
#     --tlscacert ~/.docker/ca.pem
#     --tlscert ~/.docker/cert.pem
#     --tlskey ~/.docker/key.pem
#
# or
# export DOCKER_HOST=tcp://server.example.com:2376 DOCKER_TLS_VERIFY=1
#
# Instructions for enabling TLS with auth
# https://coreos.com/os/docs/latest/customizing-docker.html#enable-the-remote-api-with-tls-authentication

#
# Configure cert creation parameters
#
- name:  "Set facts for creating docker SSL certs"
  set_fact:
    # Create CA
    ca_name:  "{{docker_ca}}"
    ca_subject_cn: "{{docker_ca_subject_cn}}"
    # Create Docker service cert
    cert_nick:  "docker_ssl_cert"
    service_principal: "{{docker_service_principal}}"
    key_bits:  "1024"
    cert_dir: "{{docker_ssl_dir}}"
    cacert_path:  "{{docker_ssl_cacert}}"
    cert_path:  "{{docker_ssl_cert}}"
    key_path:  "{{docker_ssl_key}}"
    # Create Docker client cert
    principal:  "{{manager_id}}"
    email_address:  "{{manager_id}}@{{domain_name}}"
    client_cert_dir: "../{{docker_client_ssl_dir}}"
    client_cacert_path: "../{{docker_client_ssl_cacert}}"
    client_cert_path: "../{{docker_client_ssl_cert}}"
    client_key_path: "../{{docker_client_ssl_key}}"
  tags:
    - docker-ca
    - dockerd-tls
    - docker-client-cert


#
# Create docker sub-CA for Docker authentication
#
- include: tasks/ipa_sub_ca.yaml
  when:  hostname == master_host
  tags: docker-ca


#
# Configure docker TLS
#
# Docker TLS socket instructions require separate
# `docker-tls-tcp.socket` unit.  Doing it this way requires the docker
# service to be stopped, the docker socket restarted, and the docker
# service started again, or the socket will fail with the following
# error:
#
#     docker-tls-tcp.socket: Socket service docker.service already active, refusing.
#     Failed to listen on Docker Secured Socket for the API.
#
# Interleaved service stopping/starting is complicated in Ansible.
# Instead, just run both the TCP and local socket from the same
# service.  See https://github.com/coreos/bugs/issues/1362
#
# systemd socket unit docs
# https://www.freedesktop.org/software/systemd/man/systemd.socket.html
#
- block:

    # Generate Docker service certs
    - include: tasks/ipa_certmonger_certs.yaml

    - name: "Install docker.socket systemd dropin directory"
      file:
        path: "{{dropin_dir_pat % 'docker.socket'}}"
        state: directory
        mode: 0755

    - name: "Install docker.socket dropin file to add TCP port 2375"
      template:
        src: 10-docker-tcp-socket.conf.j2
        dest: "{{dropin_dir_pat % 'docker.socket'}}/10-docker-tcp-socket.conf"
      register: systemd_docker_socket

    # Docker daemon command line docs
    # https://docs.docker.com/engine/reference/commandline/dockerd/
    - name: "Install dockerd daemon.json with TLS enabled"
      template:
        src: daemon.json.j2
        dest: "/etc/docker/daemon.json"
      register: dockerd_conf

    - name: "Restart docker service to pick up TLS configuration"
      systemd:
        name: docker.service
        daemon_reload: yes
        state: restarted
      when:
        systemd_docker_socket.changed or certmonger_certs_changed
        

  become: true
  tags: dockerd-tls


#
# Generate docker client cert
#
- include: tasks/ipa_client_certs.yaml
  tags: docker-client-cert
