---
#################################
# Configure Docker server and client TLS
#
# Enable TLS service on port 2375; afterwards, run docker remotely like this
#
# docker --tlsverify \
#     -H tcp://host1.example.com:2375 \
#     --tlscacert ~/.docker/ca.pem
#     --tlscert ~/.docker/cert.pem
#     --tlskey ~/.docker/key.pem
#
# or
# export DOCKER_HOST=tcp://server.example.com:2376 DOCKER_TLS_VERIFY=1
#
# Instructions for enabling TLS with auth
# https://coreos.com/os/docs/latest/customizing-docker.html#enable-the-remote-api-with-tls-authentication

#
# Create docker sub-CA for Docker authentication
#
- block:

    - name: "Create Docker CA"
      ipa_ca:
        name: "{{docker_ca}}"
        ipacasubjectdn: "{{docker_ca_subject}}"
        description: "Docker cluster CA"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

    - name: "Add Docker CA to CA ACL '{{user_cert_acl}}'"
      ipa_caacl:
        name: "{{user_cert_acl}}"
        ca: "{{docker_ca}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

    - name: "Add Docker CA to CA ACL 'hosts_services_caIPAserviceCert'"
      ipa_caacl:
        name: "hosts_services_caIPAserviceCert"
        ca: "{{docker_ca}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

  delegate_to: localhost
  run_once: True
  tags: docker-ca

#
# Generate docker client cert
#
- block:
    # Check for local, valid cert to avoid lots of unneeded remote
    # work in next block

    - name: "Check if docker client cert already exists locally in
      {{docker_client_ssl_cert}}"
      stat:
        path: "../{{docker_client_ssl_cert}}"
      register: local_docker_client_cert_stat
      changed_when: not local_docker_client_cert_stat.stat.exists

    - name: "Verify docker client cert validity"
      shell: "openssl verify
      -CAfile ../{{docker_client_ssl_cacert}}
      ../{{docker_client_ssl_cert}} > /dev/null
      && echo yes || echo no"
      register: local_docker_client_cert_verify
      changed_when: local_docker_client_cert_verify.stdout == "no"
      when: not local_docker_client_cert_stat.changed

  delegate_to: localhost
  run_once: True
  tags: docker-client-cert

- block:

    #
    # Create docker client cert on FreeIPA server
    #
    # FIXME use ansible openssl_privatekey module
    # FIXME use ansible openssl_csr module
    - name: "Create remote docker client cert directory
             {{docker_client_cert_dir}}"
      file:
        path: "{{docker_client_cert_dir}}"
        state: directory
        mode: 0700
      become: true

    - name: "Create openssl.conf for docker client cert"
      template:
        src: openssl-docker-client.conf.j2
        dest: "{{docker_client_openssl_conf}}"
      become: true

    - name: "Generate docker client cert key in {{docker_client_key}}"
      command: "openssl genrsa -out {{docker_client_key}} 2048"
      args:
        creates: "{{docker_client_key}}"
      become: true

    - name: "Generate docker client certificate request in
                  {{docker_client_req}}"
      command: "openssl req -new
                  -key {{docker_client_key|quote}}
                  -out {{docker_client_req|quote}}
                  -config {{docker_client_openssl_conf|quote}}"
      args:
        creates: "{{docker_client_req}}"
      become: true

    - name: "Fetch cert request from {{docker_client_req}} to
                 /tmp/docker_client_req.pem"
      fetch:
        src: "{{docker_client_req}}"
        dest: "/tmp/docker_client_req.pem"
        flat: yes
      become: true

    - name: "Read client cert request fact"
      set_fact:
        cert_req: "{{ lookup('file', '/tmp/docker_client_req.pem') }}"

    - name: "Generate docker client certificate in IPA"
      ipa_cert:
        req: "{{cert_req}}"
        principal: "{{manager_id}}"
        cacn: "{{docker_ca}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"
      delegate_to: localhost
      register: client_cert_req

    #
    # Copy client cert to local container
    #
    - name: "Create local docker directory {{docker_client_ssl_dir}}"
      file:
        path: "../{{docker_client_ssl_dir}}"
        state: directory
      delegate_to: localhost

    - name: "Dump docker client certificate into {{docker_client_ssl_cert}}"
      copy:
        content: "{{client_cert_req.cert.certificate | ipa_cert_to_pem}}"
        dest: "../{{docker_client_ssl_cert}}"
        force: yes
      delegate_to: localhost

    - name: "Fetch docker client SSL key to
                 {{docker_client_ssl_key}}"
      fetch:
        src: "{{docker_client_key}}"
        dest: "../{{docker_client_ssl_key}}"
        flat: yes
      become: true

    - name: "Restrict read permission on {{docker_client_ssl_key}}"
      file:
        path: "../{{docker_client_ssl_key}}"
        mode: 0600
      delegate_to: localhost

    - name: "Read Docker CA cert"
      ipa_cert:
        cacn: ipa
        principal: "Docker Certificate Authority"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"
      delegate_to: localhost
      # Don't actually create, just read
      check_mode: yes
      changed_when: False
      register: docker_ca_cert

    - name: "Dump docker CA cert into {{docker_client_ssl_cacert}}"
      copy:
        content: |
          {{docker_ca_cert.cert.certificate | ipa_cert_to_pem}}
          {{ lookup('file', '../var/cacert.pem') }}
        dest: "../{{docker_client_ssl_cacert}}"
        force: yes
      delegate_to: localhost

    - name: "Verify docker cert again"
      command: "openssl verify
      -CAfile ../{{docker_client_ssl_cacert}}
      ../{{docker_client_ssl_cert}}"
      delegate_to: localhost
      changed_when: False

  when:
    not local_docker_client_cert_stat.stat.exists or
    local_docker_client_cert_verify.changed
  run_once: True
  tags: docker-client-cert


#
# Docker service certs
#
# Configure service in FreeIPA and use certmonger to generate certs
#
- block:

    - name:  "Create {{docker_service_principal}} service principal and
                  add managed by {{freeipa_client_fqdn}} host"
      ipa_service:
        name: "{{docker_service_principal}}"
        managedby_host: "{{freeipa_client_fqdn}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"
      delegate_to: localhost

    - name: "Create docker server cert directory {{docker_ssl_dir}}"
      file:
        path: "{{docker_ssl_dir}}"
        state: directory
        mode: 0700
      become: true

    # Write the CA cert
    #
    # FIXME this should be done by `ipa-getcert request -F
    # {{docker_ssl_cacert}}`, but only the top-level cert is written
    - name: "Read Docker CA cert (again)"
      # Repeat of above to work around tag mess
      ipa_cert:
        cacn: ipa
        principal: "Docker Certificate Authority"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"
      delegate_to: localhost
      # Don't actually create, just read
      check_mode: yes
      changed_when: False
      register: docker_ca_cert

    - name: "Dump docker CA cert into {{docker_ssl_cacert}}"
      copy:
        content: "{{docker_ca_cert.cert.certificate | ipa_cert_to_pem}}"
        dest: "{{docker_ssl_cacert}}"
        force: yes
      become: true
      register: docker_ssl_cacert_create

    - name:  "Check cert tracking status of {{docker_ssl_cert}}"
      shell: "{{ipaclient_exec}} ipa-getcert status -f {{docker_ssl_cert}} |
                 grep -q 'No request found' && echo no || echo yes"
      register: docker_ssl_cert_tracking
      changed_when:  docker_ssl_cert_tracking.stdout == "no"

    - name:  "Start tracking docker server cert in {{docker_ssl_cert}}"
      # The cert is actually created and maintained by certmonger running
      # in ipaclient.  The {{docker_ssl_dir}} has been bind-mounted in the
      # container for this purpose.
      #
      # FIXME the cert this creates is not from the sub-CA; this may
      # also explain why the sub-CA CA cert is wrong (see above)
      shell: "{{ipaclient_exec}} ipa-getcert request -w
                  -I docker_ssl_cert
                  -f '{{docker_ssl_cert}}' -k '{{docker_ssl_key}}'
                  -K {{docker_service_principal}} -N '{{fqdn}}' -g 2048
                  -X {{docker_ca}}"
      when: docker_ssl_cert_tracking.changed

  tags: dockerd-tls


#
# Configure docker TCP socket
#
# Instructions require separate `docker-tls-tcp.socket` unit.  Doing
# it this way requires the docker service to be stopped, the docker
# socket restarted, and the docker service started again, or the
# socket will fail with the following error:
#
#     docker-tls-tcp.socket: Socket service docker.service already active, refusing.
#     Failed to listen on Docker Secured Socket for the API.
#
# Interleaved service stopping/starting is complicated in Ansible.
# Instead, just run both the TCP and local socket from the same
# service.  See https://github.com/coreos/bugs/issues/1362
#
# systemd socket unit docs
# https://www.freedesktop.org/software/systemd/man/systemd.socket.html

- block:

    - name: "Install docker.socket systemd dropin directory"
      file:
        path: "{{dropin_dir_pat % 'docker.socket'}}"
        state: directory
        mode: 0755

    - name: "Install docker.socket dropin file to add TCP port 2375"
      template:
        src: 10-docker-tcp-socket.conf.j2
        dest: "{{dropin_dir_pat % 'docker.socket'}}/10-docker-tcp-socket.conf"
      register: systemd_docker_socket

  become: true
  tags: dockerd-tls

#
# Configure dockerd TLS command line args
#
# Docker daemon command line docs
# https://docs.docker.com/engine/reference/commandline/dockerd/
#

- block:

    - name: "Install dockerd daemon.json with TLS enabled"
      template:
        src: daemon.json.j2
        dest: "/etc/docker/daemon.json"
      register: dockerd_conf

    - name: "Restart docker service to pick up TLS configuration"
      systemd:
        name: docker.service
        daemon_reload: yes
        state: restarted
      when:
        systemd_docker_socket.changed
        or docker_ssl_cacert_create.changed
        or docker_ssl_cert_tracking.changed
        

  become: true
  tags: dockerd-tls

