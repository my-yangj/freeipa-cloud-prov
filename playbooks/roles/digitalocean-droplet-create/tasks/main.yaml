---
# DigitalOcean provisioning tasks

##############################################
# Upload SSH key

- name: ensure SSH key exists at DigitalOcean
  digital_ocean:
    state: present
    command: ssh
    name: my_rsa_ssh_key
    ssh_pub_key: "{{ ssh_pub_key }}"
    api_token:  "{{ do_token }}"
  register: DO_ssh_key
  delegate_to: localhost
  delegate_facts: true
  run_once: true

- name: save DigitalOcean SSH key ID
  set_fact:
    digitalocean_ssh_key_id: "{{ DO_ssh_key.ssh_key.id }}"
    digitalocean_ssh_public_key: "{{ DO_ssh_key.ssh_key.public_key }}"

# - name: debug SSH key ID
#   debug:
#     msg: "SSH key ID is {{ digitalocean_ssh_key_id }};
#               pubkey is {{ digitalocean_ssh_public_key }}"
#     verbosity: 1

##############################################
# Create droplet

- name: create cluster droplet
  digital_ocean:
    state: present
    command: droplet
    ssh_key_ids: "{{ digitalocean_ssh_key_id }}"
    name: "{{ fqdn }}"
    api_token:  "{{ do_token }}"
    size_id: "{{ size_id }}"
    region_id: "{{ region_id }}"
    image_id: "{{ image_id }}"
    user_data: "{{ user_data|default('') }}"
    unique_name: yes
    wait_timeout: 500
  register: do_create

# - name:  debug create droplet
#   debug:
#     var: "do_create"
#     # verbosity: 2

- name: save droplet facts
  set_fact:
    droplet_id: "{{ do_create.droplet.id }}"
    droplet_ip: "{{ do_create.droplet.ip_address }}"

- name:  debug droplet facts
  debug:
    msg: "{{hostname}} IP={{droplet_ip}}; ID={{droplet_id}}"

- name: Wait for SSH port to come up
  wait_for:
    host: "{{droplet_ip}}"
    port: 22

- name: Wait for logins to be accepted
  # The `wait_for` module stopped working at some version of CoreOS,
  # because the ssh port was open, but login was rejected with the
  # message `System is booting up. See pam_nologin(8)`.
  shell: >-
    tries=20;
    while test $tries > 0; do
        if ssh -o ConnectTimeout=10s -F ../lib/ssh.config \
              -i ../var/ssh_id_rsa core@{{droplet_ip}} echo in; then
            echo "try #${tries} succeeded";
            break;
        else
            echo "try #${tries} failed";
            tries=$(($tries -1));
            if test $tries = 0; then
                exit 255;
            else
                sleep 5;
            fi;
        fi;
    done
  changed_when:  false
