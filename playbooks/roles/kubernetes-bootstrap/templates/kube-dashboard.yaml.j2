apiVersion: v1
kind: Service
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    k8s-app: kubernetes-dashboard
  ports:
    - port: 80
      targetPort: 9090

---

apiVersion: v1
kind: ReplicationController
metadata:
  name: kubernetes-dashboard-v{{k8s_dashboard_version}}
  namespace: kube-system
  labels:
    k8s-app: kubernetes-dashboard
    version: v{{k8s_dashboard_version}}
    kubernetes.io/cluster-service: "true"
spec:
  replicas: 1
  selector:
    k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
        version: v{{k8s_dashboard_version}}
        kubernetes.io/cluster-service: "true"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      containers:
        - name: kubernetes-dashboard
          image: gcr.io/google_containers/kubernetes-dashboard-amd64:v{{k8s_dashboard_version}}
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          args:
            - --kubeconfig={{k8s_dir}}/kubeconfig.yaml
            - --apiserver-host={{k8s_apiserver_url_remote}}
          ports:
            - containerPort: 9090
          livenessProbe:
            httpGet:
              path: /
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - mountPath: {{k8s_dir}}
              name: k8s
              readOnly: true
      volumes:
        - name: k8s
          hostPath:
            path: {{k8s_dir}}
