---
#################################
# Setup kubernetes deployment

#
# Basics:  master and workers
#
- block:

    - name:  "Create K8S directories"
      file:
        path: "{{item}}"
        state: directory
      with_items:
        - "{{k8s_dir}}"
        - "{{k8s_ssl_dir}}"
        - "{{k8s_manifest_dir}}"
        - "{{k8s_cni_dir}}"
        - "{{k8s_cni_dir}}/net.d"
        - "{{k8s_cni_dir}}/bin"

    - name:  "Set master node facts"
      set_fact:
        manifests:
          - kube-apiserver
          - kube-proxy
          - kube-controller-manager
          - kube-scheduler
          # - calico
      when:  hostname == master_host

    - name:  "Set worker node facts"
      set_fact:
        manifests:
          - kube-proxy
          # - calico
      when:  hostname != master_host

  become: true
  tags:
    - k8s-basics
    - k8s-pod-manifests

#################################
# Deploy kubernetes master and worker
#
# Largely step-by-step from:
#
# https://coreos.com/kubernetes/docs/latest/deploy-master.html
# https://coreos.com/kubernetes/docs/latest/deploy-workers.html

#
# TLS Assets
#

- block:

    - name:  "Set facts for creating certs"
      set_fact:
        cert_nick:  "k8s_ssl_cert"
        service_principal: "{{k8s_service_basename}}"
        ca_name:  "{{k8s_ca}}"
        ca_subject_cn:  "{{k8s_ca_subject_cn}}"
        cert_dir: "{{k8s_ssl_dir}}"
        cacert_path:  "{{k8s_ssl_cacert}}"
        cert_path:  "{{k8s_ssl_cert}}"
        key_path:  "{{k8s_ssl_key}}"
      tags:
        - k8s-sub-ca
        - k8s-certs

    # Create Kubernetes sub-CA
    - include: tasks/ipa_sub_ca.yaml
      tags: k8s-sub-ca

    # Create Kubernetes service certs
    - include: tasks/ipa_certmonger_certs.yaml
      tags: k8s-certs

  tags:
    - k8s-tls


#
# Flannel configuration
#

- block:

    - name:  "Template {{k8s_cni_dir}}/net.d/10-flannel.conf"
      template:
        src: 10-flannel.conf.j2
        dest: "{{k8s_cni_dir}}/net.d/10-flannel.conf"
      when: not k8s_use_calico

  become: true
  tags:
    - k8s-docker


#
# Set up pods
#

- block:

    - name: "Template pod manifests in {{k8s_manifest_dir}}/*.yaml"
      template:
        src: "{{item}}.yaml.j2"
        dest: "{{k8s_manifest_dir}}/{{item}}.yaml"
      become: true
      with_items:  "{{manifests}}"

    - name: "Template pod manifests locally in {{k8s_local_manifest_dir}}"
      template:
        src: "{{item}}.yaml.j2"
        dest: "../{{k8s_local_manifest_dir}}/{{item}}.yaml"
      with_items:  "{{manifests}}"
      delegate_to: localhost

  become: true
  tags:
    - k8s-pod-manifests

#
# Install systemd kubelet.service unit:  master and workers
#

- block:

    - name: "Template systemd kubelet.service unit file"
      template:
        src: kubelet.service.j2
        dest: "/etc/systemd/system/kubelet.service"
      register:  kubelet_unit_file

    - name: "Template {{k8s_dir}}/kubelet.env"
      template:
        src: kubelet.env.j2
        dest: "{{k8s_dir}}/kubelet.env"
      register:  kubelet_unit_env_file

    - name: "Template {{k8s_dir}}/kubeconfig.yaml"
      template:
        src: kubeconfig.yaml.j2
        dest: "{{k8s_dir}}/kubeconfig.yaml"
      register: kubeconfig

    - name:  "Install and run systemd kubelet.service unit"
      systemd:
        name: kubelet.service
        daemon_reload: yes
        state: "{{  (kubelet_unit_file.changed or kubelet_unit_env_file.changed
          or kubeconfig.changed) | ternary('restarted','started') }}"
        enabled: true

    - name:  "Wait for apiserver to come online on port 9080"
      wait_for:
        host:  localhost
        port:  9080
      when:  hostname == master_host

  become: true
  tags:
    - k8s-kubelet

#
# Basic Health Checks
#

- block:

    - name:  "Check API availability"
      uri:
        url: "{{k8s_apiserver_url}}/version"
      register:  k8s_api_check
      failed_when:  k8s_api_check.json.major != '1'

    - name:  "Check kube-* pod creation"
      uri:
        url: "http://127.0.0.1:10255/pods"
      register:  k8s_pod_check
      failed_when:
        not k8s_pod_check.json['items'][item].metadata.name|match(
             'kube-(scheduler|apiserver|controller-manager|proxy)')
      with_items:
        - [ 0, 1, 2, 3 ]

  when:  hostname == master_host
  tags:
    - k8s-check

#################################
# Set up kubectl
#
# https://coreos.com/kubernetes/docs/latest/configure-kubectl.html

#
# Create the local k8s client cert
#
- block:

    - name:  "Set facts for creating the kubernetes client cert"
      set_fact:
        principal: "{{manager_id}}"
        email_address:  "{{manager_id}}@{{domain_name}}"
        ca_name:  "{{k8s_ca}}"
        client_cert_dir: "../{{k8s_client_ssl_dir}}"
        client_cacert_path: "../{{k8s_client_ssl_cacert}}"
        client_cert_path: "../{{k8s_client_ssl_cert}}"
        client_key_path: "../{{k8s_client_ssl_key}}"
        key_bits: "2048"

    - include: tasks/ipa_client_certs.yaml

  run_once:  true
  tags:
    - k8s-client-cert

#
# Download and configure the local kubectl executable
#
- block:

    - name: "Download the kubectl executable"
      get_url:
        url: >-
          {{ 'https://storage.googleapis.com/kubernetes-release/release' +
             '/v%s/bin/linux/amd64/kubectl' % kubectl_version }}
        dest: "{{kubectl_path}}"
        mode: 0755

    - name: "Configure kubectl"
      command: "{{kubectl_path}} config {{item}}"
      with_items:
        - >-
          set-cluster default-cluster
          --server={{k8s_apiserver_url_remote}}
          --certificate-authority=../{{k8s_client_ssl_cacert}}
        - >-
          set-credentials default-admin
          --certificate-authority=../{{k8s_client_ssl_cacert}}
          --client-key=../{{k8s_client_ssl_key}}
          --client-certificate=../{{k8s_client_ssl_cert}}
        - >-
          set-context default-system
          --cluster=default-cluster
          --user=default-admin
        - >-
          use-context default-system

    - name: "Verify kubectl configuration and connection"
      command:  "{{kubectl_path}} get nodes"
      register:  kubectl_nodes
      failed_when:  "'Ready' not in kubectl_nodes.stdout"


  delegate_to: localhost
  run_once:  true
  tags:
    - k8s-kubectl

#
# Deploy the DNS add-on
#
- block:

    - name: "Template the k8s DNS add-on definition"
      template:
        src: "{{item}}.yaml.j2"
        dest: "../var/k8s/{{item}}.yaml"
      register:  k8s_dns_manifest
      with_items:
        - dns-addon

    - name: "Template the k8s DNS add-on definition locally"
      template:
        src: "{{item}}.yaml.j2"
        dest: "../{{k8s_local_manifest_dir}}/{{item}}.yaml"
      with_items:
        - dns-addon
      delegate_to: localhost

    - name: "Check the k8s DNS add-on"
      shell: "{{kubectl_path}} get pods --namespace=kube-system |
                  grep -q kube-dns-v20 && echo yes || echo no"
      register: k8s_dns_addon
      changed_when: "k8s_dns_addon.stdout == 'no'"

    - name: "Start the k8s DNS add-on"
      # FIXME use the Ansible kubernetes module
      command: "{{kubectl_path}} create -f ../var/k8s/dns-addon.yaml"
      when:  k8s_dns_addon.changed or k8s_dns_manifest.changed

    - name: "Re-check the k8s DNS add-on"
      shell: "{{kubectl_path}} get pods --namespace=kube-system |
                  grep kube-dns-v20"
      changed_when: false
      when:  k8s_dns_addon.changed or k8s_dns_manifest.changed

  delegate_to: localhost
  run_once:  true
  tags:
    - k8s-dns

#
# Deploy the kube dashboard add-on
#
- block:

    - name: "Template the k8s kube dashboard add-on definition"
      template:
        src: "{{item}}.yaml.j2"
        dest: "../var/k8s/{{item}}.yaml"
      with_items:
        - kube-dashboard

    - name: "Template the k8s kube dashboard add-on definition locally"
      template:
        src: "{{item}}.yaml.j2"
        dest: "../{{k8s_local_manifest_dir}}/{{item}}.yaml"
      with_items:
        - kube-dashboard
      delegate_to: localhost

    - name: "Check the k8s kube dashboard add-on"
      shell: "{{kubectl_path}} get pods --namespace=kube-system |
                  grep -q kubernetes-dashboard && echo yes || echo no"
      register: k8s_dashboard_addon
      changed_when: "k8s_dashboard_addon.stdout == 'no'"

    - name: "Start the k8s kube dashboard add-on"
      # FIXME use the Ansible kubernetes module
      command: "{{kubectl_path}} create -f
                     ../var/k8s/kube-dashboard.yaml"
      when:  k8s_dashboard_addon.changed

    - name: "Re-check the k8s kube dashboard add-on"
      shell: "{{kubectl_path}} get pods --namespace=kube-system |
                  grep kubernetes-dashboard"
      changed_when: false
      when:  k8s_dashboard_addon.changed

    # - name: "Get k8s dashboard pod name"
    #   shell: "kubectl get pods --namespace=kube-system |
    #               awk '/kubernetes-dashboard/ { print $1 }'"
    #   register: k8s_dashboard_pod

    # - name: "Port forward k8s dashboard"
    #   shell: "kubectl port-forward {{k8s_dashboard_pod.stdout}}
    #               9090 --namespace=kube-system"

  delegate_to: localhost
  run_once:  true
  tags:
    - k8s-dashboard
