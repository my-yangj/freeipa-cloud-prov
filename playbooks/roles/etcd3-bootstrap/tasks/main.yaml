---
#################################
# Configure etcd on CoreOS
#

- block:
    # Create SRV records for etcd service discovery

    - name:  Create SRV records for etcd servers
      ipa_dnsrecord:
        name: "_etcd-server-ssl._tcp"
        zone: "{{domain_name}}"
        srvrecord: "0 100 2380 {{fqdn}}."
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

    - name:  Create SRV records for etcd clients
      ipa_dnsrecord:
        name: "_etcd-client-ssl._tcp"
        zone: "{{domain_name}}"
        srvrecord: "0 100 2379 {{fqdn}}."
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

  delegate_to: localhost
  tags:
    - etcd-dns-srv

#
# Configure DNS resolvers to point at FreeIPA
#
- block:
    # Point CoreOS resolver at FreeIPA to read etcd SRV records and
    # resolve member names
    - name: "Template /etc/systemd/resolved.conf with all FreeIPA servers"
      template:
        src: resolved.conf.j2
        dest: /etc/systemd/resolved.conf
      register:  resolved_conf
      vars:
        dns_servers: "{{ groups.coreos }}"

    - name:  "Reload systemd and restart systemd-resolved.service"
      systemd:
        name: systemd-resolved
        daemon_reload: yes
        state: restarted
      when:  resolved_conf.changed

  become: true
  tags:
    - etcd-resolv-conf

#
# Create etcd sub-CA and etcd user
#
- block:

    - name: "Create Etcd CA"
      ipa_ca:
        name: "{{etcd_ca}}"
        ipacasubjectdn: "{{etcd_ca_subject}}"
        description: "Etcd Cluster CA"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

    - name: "Add Etcd CA to CA ACL '{{user_cert_acl}}'"
      ipa_caacl:
        name: "{{user_cert_acl}}"
        ca: "{{etcd_ca}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

    - name: "Add Etcd CA to CA ACL 'hosts_services_caIPAserviceCert'"
      ipa_caacl:
        name: "hosts_services_caIPAserviceCert"
        ca: "{{etcd_ca}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"

  delegate_to: localhost
  run_once: True
  tags:
    - etcd-ca


#
# Etcd service certs
#
# Configure service in FreeIPA and use certmonger to generate certs
#
- block:

    - name: "Create etcd cert directory {{etcd_cert_dir}}"
      file:
        path: "{{etcd_cert_dir}}"
        state: directory
        mode: 0755
      become: true

    - name:  "Create {{etcd_service_principal}} service principal and
                  add managed by {{freeipa_fqdn}} host"
      ipa_service:
        name: "{{etcd_service_principal}}"
        managedby_host: "{{freeipa_fqdn}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"
      delegate_to: localhost

    - name: "Read Etcd CA cert"
      ipa_cert:
        cacn: ipa
        principal: "{{etcd_ca_subject_short}}"
        state: present
        ipa_host: "{{fqdn}}"
        ipa_user: "{{ipa_user}}"
        ipa_pass: "{{freeipa_admin_password}}"
      delegate_to: localhost
      # Don't actually create, just read
      check_mode: yes
      changed_when: False
      register: etcd_ca_cert

    - name: "Dump etcd CA cert into {{etcd_ssl_cacert}}"
      copy:
        content: |
          {{etcd_ca_cert.cert.certificate | ipa_cert_to_pem}}
          {{ lookup('file', '../var/cacert.pem') }}
        dest: "{{etcd_ssl_cacert}}"
        force: yes
      become: true
      register: etcd_ssl_cacert_create

    - name:  "Check cert tracking status of {{etcd_ssl_cert}}"
      shell: "{{ipa_exec}}
                 ipa-getcert status -f {{etcd_ssl_cert}} |
                 grep -q 'No request found' && echo no || echo yes"
      register: etcd_ssl_cert_tracking
      changed_when:  etcd_ssl_cert_tracking.stdout == "no"

    - name:  "Start tracking etcd server cert in {{etcd_ssl_cert}}"
      # The cert is actually created and maintained by certmonger running
      # in ipa.  The {{etcd_ssl_dir}} has been bind-mounted in the
      # container for this purpose.
      shell: "{{ipa_exec}} ipa-getcert request -w
                  -I etcd_ssl_cert
                  -f {{etcd_ssl_cert}} -k {{etcd_ssl_key}}
                  -K {{etcd_service_principal}} -N '{{fqdn}}' -g 2048
                  -X {{etcd_ca}}"
      when: etcd_ssl_cert_tracking.changed

    # Install dropin to chown certs to etcd; the `ipa-getcert request
    # -C` arg didn't seem to work, so do it this way instead
    - name:  "Install etcd-member dropin directory"
      file:
        path: "{{dropin_dir_pat % 'etcd-member.service'}}"
        state: directory
        mode: 0755
      become: true

    - name:  "Install etcd-member dropin to make certs readable by etcd user"
      template:
        src: 10-cert-owner.conf.j2
        dest: "{{dropin_dir_pat % 'etcd-member.service'}}/10-cert-owner.conf"
      become: true
      register: cert_owner_dropin

  tags:
    - etcd-server-cert
    - etcd-start

#
# Enable TLS on initial member
#
- block:

    - name:  "Install etcd-member dropin to configure TLS on initial member"
      template:
        src: 30-certs.conf.j2
        dest: "{{dropin_dir_pat % 'etcd-member.service'}}/30-certs.conf"
      become: true
      when:  hostname == master_host
      register:  certs_dropin

    - name:  "Read etcd member list"
      # Setting field sep to `:`, $1 is member id, $3 is `//host` part
      # of URL
      shell: "etcdctl member list | awk -F : '{print $1; print $3}'"
      changed_when: false
      register:  etcd_member_list

    - name:  "Set initial member facts"
      set_fact:
        initial_member_id:  "{{etcd_member_list.stdout_lines[0]|default('')}}"
        # Cut off initial slashes
        initial_member_host:
          "{{etcd_member_list.stdout_lines[1]|default('//'[2:])}}"

    - name:  "Fix etcd peer URL on initial member"
      command:
        "etcdctl member update {{initial_member_id}} https://{{fqdn}}:2380"
      when:  "initial_member_host != fqdn and
          initial_member_id and initial_member_host"

  when:  hostname == master_host
  tags:
    - etcd-initial-member
    - etcd-start

#
# Add later members to cluster and clear any old config
#
- block:

  - name:  "Ensure "

#
# Reload etcd-member service
#
- name:  "Reload systemd and restart etcd-member.service"
  systemd:
    name: etcd-member
    daemon_reload: yes
    state: restarted
  become: true
  when:  "etcd_ssl_cert_tracking.changed
       or cert_owner_dropin.changed
       or certs_dropin.changed
       or initial_member_host|default('bogus') != fqdn"

  tags:
    - etcd-start

#
# Add etcdctl command alias
#
- block:

    - name:  "Check if ~core/.bashrc is a symlink"
      stat:
        path: "/home/core/.bashrc"
      register:  bashrc_stat

    - name:  "Delete ~core/.bashrc symlink"
      file:
        path: "/home/core/.bashrc"
        state: absent
      when:  bashrc_stat.stat.islnk

    - name:  "Copy /usr/share/skel/.bashrc to ~core/.bashrc"
      command: "cp /usr/share/skel/.bashrc /home/core/.bashrc"
      when:  bashrc_stat.stat.islnk

    - name:  Add etcdctl command as alias
      lineinfile:
        dest: "/home/core/.bashrc"
        state: present
        insertafter: EOF
        line: "alias etcdctl='sudo {{etcdctl_command}}'"

  tags:
    - etcdctl-alias
