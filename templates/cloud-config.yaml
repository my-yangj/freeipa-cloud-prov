#cloud-config

# Docs:
#    https://coreos.com/os/docs/latest/cloud-config.html
# Validate:  use either of these:
#    https://coreos.com/validate/
#    coreos-cloudinit -validate
# `drop-ins`:
#   https://coreos.com/os/docs/latest/using-systemd-drop-in-units.html

hostname: {{hostname}}

{{ssh_authorized_keys}}

coreos:
  update:
    # https://coreos.com/os/docs/latest/update-strategies.html
    reboot-strategy: etcd-lock
  etcd2:
    # generate a new token for each unique cluster:
    # curl -w "\n" "https://discovery.etcd.io/new?size=3"
    #
    discovery: {{discovery_url}}
    # multi-region and multi-cloud deployments need to use $public_ipv4
    # advertise-client-urls: https://$public_ipv4:2379,https://$public_ipv4:4001
    advertise-client-urls: https://$public_ipv4:2379
    initial-advertise-peer-urls: https://$public_ipv4:2380
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    # listen-client-urls: https://0.0.0.0:2379,https://0.0.0.0:4001
    listen-client-urls: https://0.0.0.0:2379
    listen-peer-urls: https://$public_ipv4:2380
    # tune raft elections
    # https://github.com/coreos/etcd/blob/v2.3.2/Documentation/tuning.md#time-parameters
    heartbeat-interval: 300
    election-timeout: 3000
    # SSL cert file locations
    cert_file: {{serv_cert_file_path}}
    key_file: {{serv_key_file_path}}
    trusted_ca_file: {{ca_cert_file_path}}
    client_cert_auth: true
    peer_cert_file: {{clnt_cert_file_path}}
    peer_key_file: {{clnt_key_file_path}}
    peer_trusted_ca_file: {{ca_cert_file_path}}
    peer_client_cert_auth: true
  fleet:
    metadata: {{fleet_metadata}}
    # Use HTTPS on port 2379:
    etcd_servers: https://$public_ipv4:2379
    public-ip: $public_ipv4   # used for fleetctl ssh command
    etcd_cafile: {{ca_cert_file_path}}
    etcd_certfile: {{clnt_cert_file_path}}
    etcd_keyfile: {{clnt_key_file_path}}
  locksmith:
    endpoint: https://$public_ipv4:2379
    etcd_cafile: {{ca_cert_file_path}}
    etcd_certfile: {{clnt_cert_file_path}}
    etcd_keyfile: {{clnt_key_file_path}}
  units:
    #######################################
    # base daemons
    - name: etcd2.service
      command: start
    - name: fleet.service
      command: start
    - name: iptables-restore.service
      enable: true
      command: start
    # Mask legacy etcd[1] service so it doesn't accidentally start
    - name: etcd.service
      mask: true
      # Remote API access?
        # https://coreos.com/os/docs/latest/customizing-docker.html#enable-the-remote-api-on-a-new-socket
    #######################################
    # disk
    #
    # This requires a DO volume with two partitions, swap and ext4
    # filesystem
    - name: dev-sda1.swap
      command: start
      content: |
        [Swap]
        What=/dev/sda1

        [Install]
        WantedBy=multi-user.target
    - name: media-state.mount
      command: start
      content: |
        [Mount]
        What=/dev/sda2
        Where=/media/state
        Type=ext4

        [Install]
        WantedBy=multi-user.target
    # Load IPSec kernel module
    # https://coreos.com/os/docs/latest/other-settings.html#via-cloud-init
    # Also see below /etc/modules-load.d/af_key.conf
    - name: systemd-modules-load.service
      command: restart

write_files:
  # Load IPSec kernel module
  - path: /etc/modules-load.d/af_key.conf
    content: af_key

  - path: /run/systemd/system/docker.service.d/no-ip-masq.conf
    content: |
      [Service]
      Environment="DOCKER_OPT_IPMASQ=--ip-masq=false --iptables=false --userland-proxy=false"

  # Wish for a purpose-built Docker container with IPA tools, and
  # apt-get install -y emacs-nox tcpdump ldap-utils bridge-utils psutils iptables net-tools dnsutils telnet
  - path: /home/core/.toolboxrc
    content: |
      TOOLBOX_DOCKER_IMAGE=debian
      TOOLBOX_USER=root

  # This seems to break provisioning
  # - path: /usr/share/skel/.bashrc
  #   permissions: 0644
  #   content: |
  #     # /etc/skel/.bashrc
  #     #
  #     # Set environment so etcdctl works over SSL
  #     export ETCDCTL_ENDPOINT=https://127.0.0.1:2379/
  #     export ETCDCTL_CERT_FILE={{clnt_cert_file_path}}
  #     export ETCDCTL_KEY_FILE={{clnt_key_file_path}}
  #     export ETCDCTL_CA_FILE={{ca_cert_file_path}}
